#include <unordered_map>

//map chars to ints
unordered_map<char,int> umap;

//insert pair
umap['a'] = 1;
umap['b'] = 2;

int x = umap['b'];

cout << umap['a']; //prints out 1
cout << x; //prints out 2;

if(umap.find('a') == umap.end()) //happens O(1)
	cout << "a not in map";
else
	cout << "a is in map";

unordered_set<int> s; //no duplicates
s.insert(1);

if(s.find(1) != s.end()) //happens in O(1)
	cout << "found 1!";
else
	cout << "didn't find 1";


void findMissing(vector<int> v, int low, int high){
	unordered_set s;
	for(int i = 0; i < v.size(); i++)
		s.insert(v[i]);
	//iterate over range
	for(int i = low; i <= high; i++){
		if(s.find(i) == s.end())
			cout << i;
	}
}

O(n + (high - low));


for(int i = 0; i < v.size(); i++){
	int repeated = false;
	for(int j = i + 1; j < v.size(); j++)
		if(v[i] == v[j])
			repeated = true;
	if(repeated == false)
		return i;
}


1 2 5 6 2 1

unordered_map<char,int> umap;

//map the numbers to their frequency

for(int i = 0; i < s.size(); i++){
	umap[s[i]]++;
}

for(int i = 0; i < s.size(); i++){
	if(umap[s[i]] == 1)
		return i;
}

a b c d a


key value
a   2
b   1
c   1
d   1



for(int i = 0; i < v.size(); i++){
	for(int j = i+1; i < v.size(); j++){
		int sum = v[i] + v[j];
		//modify to check that -sum does not
		//occur at index i or j
		if(s.find(-sum) != s.end())
			return true;
	}
}






